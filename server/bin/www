#!/usr/bin/env node
// 加载模块依赖
const { app, server,   } = require('../../app'); // 确保使用解构赋值来导入

const debug = require('debug')('blog:server');


// 获取端口并设置到 Express 应用
const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);



// 监听端口，所有网络接口
server.listen(port,()=>{
  console.log("服务启动！");
});
server.on('error', onError);
server.on('listening', onListening);

// 将端口规范化为数字、字符串或 false
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // 命名管道
    return val;
  }
  if (port >= 0) {
    // 端口号
    return port;
  }
  return false;
}

// HTTP 服务器 "error" 事件监听器
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // 用友好的消息处理特定的监听错误
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' 需要提升权限');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' 已被使用');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// HTTP 服务器 "listening" 事件监听器
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

